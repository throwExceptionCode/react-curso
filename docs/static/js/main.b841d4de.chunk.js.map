{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFechGifts.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","cats","type","value","onChange","target","getGif","category","a","query","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","loading","state","setstate","useEffect","then","imgs","GifGridItem","className","src","alt","GifGrid","GifExpertApp","categories","i","ReactDOM","render","document","getElementById"],"mappings":"yMA+BeA,EA3BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAClB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAUA,OACI,uBAAMC,SANW,SAACC,GAClBA,EAAEC,iBACFN,GAAc,SAAAO,GAAI,OAAKL,GAAL,mBAAoBK,QAItC,UACI,6CACI,uBACIC,KAAK,OACLC,MAAQP,EACRQ,SAdU,SAACL,GACvBF,EAAcE,EAAEM,OAAOF,c,+BCRlBG,EAAM,uCAAG,WAAOC,GAAP,yBAAAC,EAAA,sEAEH,mCACE,GACRC,EAAQF,EACRG,EALS,qDAGD,GAHC,cAKsDC,UAAUF,GALhE,oBAEH,mCAFG,sBAMIG,MAAOF,GANX,cAMTG,EANS,iBAQMA,EAAKC,OARX,wBAQRC,EARQ,EAQRA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAG,MACpB,CAACC,GAAID,EAAIC,GAAIC,MAAOF,EAAIE,MAAOV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVtD,kBAaRM,GAbQ,2HAAH,sDCGNO,EAAe,SAAEhB,GAE1B,MAA0BZ,mBAAS,CAC/BoB,KAAK,GACLS,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAaA,OAPAC,qBAAU,WACNrB,EAAOC,GAAUqB,MAAK,SAAAC,GAAI,OAAIH,EAAS,CACnCX,KAAKc,EACLL,SAAQ,SAEd,CAACjB,IAEIkB,GChBEK,EAAc,SAAC,GAAsB,IAApBV,EAAmB,EAAnBA,MAAMV,EAAa,EAAbA,IAAIS,EAAS,EAATA,GACpC,OACI,sBAAKY,UAAU,6CAAf,UACI,6BAAMX,IACN,qBAAKY,IAAKtB,EAAKuB,IAAKb,IACpB,6BAAMD,QCkCHe,EApCC,SAAC,GAAkB,IAAhB3B,EAAe,EAAfA,SAEf,EAAgCgB,EAAahB,GAAhCc,EAAb,EAAQN,KAAYS,EAApB,EAAoBA,QAcpB,OAFAD,IAGI,mCACI,6BACI,sBAAKQ,UAAU,YAAf,UACI,qBAAKA,UAAU,eAAf,cAAkCxB,EAAlC,OACCiB,GAAW,WACZ,uBAEIH,EAAOJ,KAAK,SAACC,GAAD,OACR,cAAC,EAAD,eAAgCA,GAAdA,EAAIC,eCzBrCgB,EAAe,WAExB,MAAoCxC,mBAAS,CAAC,QAA9C,mBAAOyC,EAAP,KAAmB1C,EAAnB,KASA,OACI,qCACI,8CAEA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEK0C,EAAWnB,KAAI,SAACV,EAAS8B,GAAV,OACf,cAAC,EAAD,CAEA9B,SAAUA,GADJA,QAMX,2B,YCzBZ+B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b841d4de.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst AddCategory = ({setCategories}) => {\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    const handleInputCahnge = (e)=>{\r\n        setinputValue(e.target.value);\r\n    };\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n        setCategories(cats => [inputValue, ...cats] );\r\n        \r\n    };\r\n    return (\r\n        <form onSubmit={ handleSubmit } >\r\n            <h2>AddCategory</h2>\r\n                <input \r\n                    type='text'\r\n                    value={ inputValue }\r\n                    onChange={ handleInputCahnge }\r\n                />\r\n            </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddCategory\r\n\r\n","export const getGif = async (category)=>{\r\n    try {\r\n       const key = 'U7NsQmeqBwinUBJTBYYi3p9ifI4SpeQ3';\r\n       const limit = 10;\r\n       const query = category;\r\n       const url = `https://api.giphy.com/v1/gifs/search?limit=${limit}&q=${encodeURI(query)}&api_key=${key}&rating=r`;\r\n       const resp = await fetch( url );\r\n       //console.log(resp.ok);\r\n       const {data} = await resp.json();\r\n       const gifs = data.map(img =>\r\n           ({id: img.id, title: img.title, url: img.images.downsized_medium.url}));\r\n       //console.log(gifs);\r\n       //setImages(gifs);\r\n       return gifs;\r\n    } catch (error) {\r\n        //console.log(error)\r\n        return error;\r\n    }\r\n   \r\n    \r\n};\r\n","import { useState,useEffect } from \"react\";\r\nimport { getGif } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category )=>\r\n{\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading:true,\r\n    });\r\n    \r\n    \r\n    useEffect(()=>{\r\n        getGif(category).then(imgs => setstate({\r\n            data:imgs,\r\n            loading:false,\r\n        }));\r\n    },[category])\r\n\r\n    return state;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {title,url,id} ) => {\r\n    return (\r\n        <div className='card animate__animated animate__backInDown' >\r\n            <h5>{ title }</h5>\r\n            <img src={url} alt={title}/>\r\n            <h5>{ id }</h5>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';//, { useState,useEffect }\r\nimport { useFetchGifs } from '../hooks/useFechGifts';\r\n//import { getGif } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nconst GifGrid = ({ category }) => {\r\n    //const [Images, setImages] = useState([]);\r\n    const { data:images,loading } = useFetchGifs(category);\r\n    //const [conteo, setconteo] = useState(1);\r\n    /*useEffect(()=>{\r\n        getGif(category).then(setImages);\r\n    },[category])*/\r\n    //<h2>{conteo}</h2>\r\n    //<button onClick={ () => setconteo( conteo + 1 ) } >+</button>\r\n    \r\n    \r\n    \r\n    //getGif\r\n\r\n    useFetchGifs();\r\n    \r\n    return (\r\n        <>\r\n            <li>\r\n                <div className=\"card-grid\" >\r\n                    <h3  className=\"title-search\" > { category } </h3>\r\n                    {loading && 'Cargando' }\r\n                    <br/>\r\n                    { \r\n                        images.map( (img) => (\r\n                            <GifGridItem key={img.id}  { ...img } />\r\n                        ) )\r\n                    }\r\n                </div>\r\n            </li>\r\n\r\n                \r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n    //const categories = ['One Punch','Samurai X','Dragon Ball'];\r\n    const [categories, setCategories] = useState(['GOT']);\r\n    \r\n    /*const handeleAdd = () =>{\r\n        //let newCategories = [...categories];\r\n        //newCategories.push('AOT');\r\n        //setCategories(newCategories);\r\n        setCategories(cats => [...cats,'AOT'] );\r\n    };*/\r\n    \r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            \r\n            <AddCategory setCategories={ setCategories } />\r\n            <ol>\r\n                {  \r\n                 categories.map((category,i) => \r\n                 <GifGrid \r\n                 key={ category } \r\n                 category={category}\r\n                 /> \r\n                 )\r\n                }\r\n            </ol>\r\n            <hr></hr>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\nimport \"animate.css\";\n\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n);"],"sourceRoot":""}